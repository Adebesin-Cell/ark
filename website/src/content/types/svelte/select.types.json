{
  "ClearTrigger": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'button'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "ref": { "type": "Element", "isRequired": false }
    }
  },
  "Content": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'div'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "ref": { "type": "Element", "isRequired": false }
    }
  },
  "Context": { "props": { "render": { "type": "Snippet<[UseSelectReturn<T>]>", "isRequired": true } } },
  "Control": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'div'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "ref": { "type": "Element", "isRequired": false }
    }
  },
  "HiddenSelect": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'select'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "ref": { "type": "Element", "isRequired": false }
    }
  },
  "Indicator": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'div'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "ref": { "type": "Element", "isRequired": false }
    }
  },
  "ItemContext": { "props": { "render": { "type": "Snippet<[UseSelectItemContext]>", "isRequired": true } } },
  "ItemGroupLabel": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'div'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "ref": { "type": "Element", "isRequired": false }
    }
  },
  "ItemGroup": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'div'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "id": { "type": "string", "isRequired": false },
      "ref": { "type": "Element", "isRequired": false }
    }
  },
  "ItemIndicator": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'div'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "ref": { "type": "Element", "isRequired": false }
    }
  },
  "Item": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'div'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "disabled": { "type": "boolean", "isRequired": false },
      "item": { "type": "NonNullable<T>", "isRequired": false },
      "ref": { "type": "Element", "isRequired": false }
    }
  },
  "ItemText": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'span'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "ref": { "type": "Element", "isRequired": false }
    }
  },
  "Label": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'label'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "ref": { "type": "Element", "isRequired": false }
    }
  },
  "List": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'div'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "ref": { "type": "Element", "isRequired": false }
    }
  },
  "Positioner": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'div'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "ref": { "type": "Element", "isRequired": false }
    }
  },
  "Root": {
    "props": {
      "collection": { "type": "ListCollection<T>", "isRequired": true, "description": "The collection of items" },
      "asChild": {
        "type": "Snippet<[PropsFn<'div'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "closeOnSelect": {
        "type": "boolean",
        "defaultValue": "true",
        "isRequired": false,
        "description": "Whether the select should close after an item is selected"
      },
      "composite": {
        "type": "boolean",
        "defaultValue": "true",
        "isRequired": false,
        "description": "Whether the select is a composed with other composite widgets like tabs or combobox"
      },
      "defaultHighlightedValue": {
        "type": "string",
        "isRequired": false,
        "description": "The initial value of the highlighted item when opened.\nUse when you don't need to control the highlighted value of the select."
      },
      "defaultOpen": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the select's open state is controlled by the user"
      },
      "defaultValue": {
        "type": "string[]",
        "isRequired": false,
        "description": "The initial default value of the select when rendered.\nUse when you don't need to control the value of the select."
      },
      "deselectable": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the value can be cleared by clicking the selected item.\n\n**Note:** this is only applicable for single selection"
      },
      "disabled": { "type": "boolean", "isRequired": false, "description": "Whether the select is disabled" },
      "form": { "type": "string", "isRequired": false, "description": "The associate form of the underlying select." },
      "highlightedValue": {
        "type": "string",
        "isRequired": false,
        "description": "The controlled key of the highlighted item"
      },
      "id": { "type": "string", "isRequired": false, "description": "The unique identifier of the machine." },
      "ids": {
        "type": "Partial<{\n  root: string\n  content: string\n  control: string\n  trigger: string\n  clearTrigger: string\n  label: string\n  hiddenSelect: string\n  positioner: string\n  item: (id: string | number) => string\n  itemGroup: (id: string | number) => string\n  itemGroupLabel: (id: string | number) => string\n}>",
        "isRequired": false,
        "description": "The ids of the elements in the select. Useful for composition."
      },
      "immediate": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to synchronize the present change immediately or defer it to the next frame"
      },
      "invalid": { "type": "boolean", "isRequired": false, "description": "Whether the select is invalid" },
      "lazyMount": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to enable lazy mounting"
      },
      "loopFocus": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to loop the keyboard navigation through the options"
      },
      "multiple": { "type": "boolean", "isRequired": false, "description": "Whether to allow multiple selection" },
      "name": {
        "type": "string",
        "isRequired": false,
        "description": "The `name` attribute of the underlying select."
      },
      "onExitComplete": {
        "type": "VoidFunction",
        "isRequired": false,
        "description": "Function called when the animation ends in the closed state"
      },
      "onFocusOutside": {
        "type": "(event: FocusOutsideEvent) => void",
        "isRequired": false,
        "description": "Function called when the focus is moved outside the component"
      },
      "onHighlightChange": {
        "type": "(details: HighlightChangeDetails<T>) => void",
        "isRequired": false,
        "description": "The callback fired when the highlighted item changes."
      },
      "onInteractOutside": {
        "type": "(event: InteractOutsideEvent) => void",
        "isRequired": false,
        "description": "Function called when an interaction happens outside the component"
      },
      "onOpenChange": {
        "type": "(details: OpenChangeDetails) => void",
        "isRequired": false,
        "description": "Function called when the popup is opened"
      },
      "onPointerDownOutside": {
        "type": "(event: PointerDownOutsideEvent) => void",
        "isRequired": false,
        "description": "Function called when the pointer is pressed down outside the component"
      },
      "onSelect": {
        "type": "(details: SelectionDetails) => void",
        "isRequired": false,
        "description": "Function called when an item is selected"
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails<T>) => void",
        "isRequired": false,
        "description": "The callback fired when the selected item changes."
      },
      "open": { "type": "boolean", "isRequired": false, "description": "Whether the select menu is open" },
      "positioning": {
        "type": "PositioningOptions",
        "isRequired": false,
        "description": "The positioning options of the menu."
      },
      "present": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the node is present (controlled by the user)"
      },
      "readOnly": { "type": "boolean", "isRequired": false, "description": "Whether the select is read-only" },
      "ref": { "type": "Element", "isRequired": false },
      "required": { "type": "boolean", "isRequired": false, "description": "Whether the select is required" },
      "scrollToIndexFn": {
        "type": "(details: ScrollToIndexDetails) => void",
        "isRequired": false,
        "description": "Function to scroll to a specific index"
      },
      "skipAnimationOnMount": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to allow the initial presence animation."
      },
      "unmountOnExit": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to unmount on exit."
      },
      "value": { "type": "string[]", "isRequired": false, "description": "The controlled keys of the selected items" }
    }
  },
  "RootProvider": {
    "props": {
      "value": { "type": "UseSelectReturn<T>", "isRequired": true },
      "asChild": {
        "type": "Snippet<[PropsFn<'div'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "immediate": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to synchronize the present change immediately or defer it to the next frame"
      },
      "lazyMount": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to enable lazy mounting"
      },
      "onExitComplete": {
        "type": "VoidFunction",
        "isRequired": false,
        "description": "Function called when the animation ends in the closed state"
      },
      "present": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the node is present (controlled by the user)"
      },
      "ref": { "type": "Element", "isRequired": false },
      "skipAnimationOnMount": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to allow the initial presence animation."
      },
      "unmountOnExit": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to unmount on exit."
      }
    }
  },
  "Trigger": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'button'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "ref": { "type": "Element", "isRequired": false }
    }
  },
  "ValueText": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'span'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "placeholder": { "type": "string", "isRequired": false },
      "ref": { "type": "Element", "isRequired": false }
    }
  }
}
